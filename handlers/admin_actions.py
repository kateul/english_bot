from aiogram import types, Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db import get_student_by_day, get_all_students
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keyboards.days import days_keyboard
from keyboards.admin_menu import get_admin_keyboard
from loader import bot

router = Router()


class FilterStudents(StatesGroup):
    day = State()


class Broadcast(StatesGroup):
    waiting_for_message = State()


@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")
async def show_day_filter(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_keyboard)
    await state.set_state(FilterStudents.day)


@router.message(FilterStudents.day)
async def show_students(message: types.Message, state: FSMContext):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –¥–µ–Ω—å: {message.text}")
    day = message.text.strip()
    if day == "üìÖ –í—Å—è –Ω–µ–¥–µ–ª—è":
        students = await get_all_students()
    else:
        students = await get_student_by_day(day)

    if not students:
        await message.answer("–£—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        text = ""
        for s in students:
            text += f"üë§ {s['first_name']} {s['last_name']} ‚Äî {s['day_of_week']} –≤ {s['lesson_time']}\n"
        await message.answer(text)

    await message.answer("–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?", reply_markup=days_keyboard)

    await state.clear()


@router.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def ask_for_broadcast_message(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º:")
    await state.set_state(Broadcast.waiting_for_message)


@router.message(Broadcast.waiting_for_message)
async def send_broadcast(message: types.Message, state: FSMContext):
    students = await get_all_students()
    count = 0
    for student in students:
        try:
            await bot.send_message(student['telegram_id'], message.text)
            count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {student.get('telegram_id')}: {e}")
    await message.answer(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —É—á–µ–Ω–∏–∫–∞–º.", reply_markup=get_admin_keyboard())
    await state.clear()

