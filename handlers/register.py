from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db import add_student
from config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD
from datetime import datetime
import asyncpg
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è (—ç—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞)
class RegisterState(StatesGroup):
    first_name = State()
    last_name = State()
    day = State()
    time = State()


#–ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def is_user_registered(telegram_id: int) -> bool:
    pool = await asyncpg.create_pool(
        host=DB_HOST, port=DB_PORT, database=DB_NAME,
        user=DB_USER, password=DB_PASSWORD
    )
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM students WHERE telegram_id = $1", telegram_id) #eturns the current row of a recordset as an array
    await pool.close()
    return user is not None

# –°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞
@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register_start(message: types.Message, state: FSMContext):
    if await is_user_registered(message.from_user.id):
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üòä")
        return

    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ò–º—è)")
    await state.set_state(RegisterState.first_name)

@router.message(RegisterState.first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–ê —Ñ–∞–º–∏–ª–∏—è?")
    await state.set_state(RegisterState.last_name)

@router.message(RegisterState.last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    days_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫")],
            [KeyboardButton(text="–°—Ä–µ–¥–∞"), KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥")],
            [KeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞"), KeyboardButton(text="–°—É–±–±–æ—Ç–∞")],
            [KeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í –∫–∞–∫–æ–π –¥–µ–Ω—å —É —Ç–µ–±—è –∑–∞–Ω—è—Ç–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)", reply_markup=days_keyboard)
    await state.set_state(RegisterState.day)

@router.message(RegisterState.day)
async def process_day(message: types.Message, state: FSMContext):
    await state.update_data(day_of_week=message.text)
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –≤—Ä–µ–º—è –ø–æ –ú–°–ö)")
    await state.set_state(RegisterState.time)

@router.message(RegisterState.time)
async def process_time(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lesson_time = message.text

    try:
        lesson_time = datetime.strptime(lesson_time, "%H:%M").time()
    except ValueError:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 17:30.")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
    pool = await asyncpg.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME
    )

    await add_student(
        pool=pool,
        telegram_id=message.from_user.id,
        first_name=data["first_name"],
        last_name=data["last_name"],
        day_of_week=data["day_of_week"],
        lesson_time=lesson_time
    )

    await pool.close()

    await message.answer("‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    await state.clear()
