from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, State
from db import update_student_field, get_student_by_id
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from keyboards.update_fields_keyboard import update_fields_keyboard


from keyboards.menu import get_main_menu

router = Router()

class UpdateState(StatesGroup):
    choosing_field = State()
    updating_value = State()


@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def start_update(message: types.Message, state: FSMContext):
    student = await get_student_by_id(message.from_user.id)
    if not student:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")
        return

    await message.answer(
        f"–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: \n"
        f"–ò–º—è: {student['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {student['last_name']}\n"
        f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {student['day_of_week']}\n"
        f"–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è: {student['lesson_time']}\n\n"
        f"–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=update_fields_keyboard
    )
    await state.set_state(UpdateState.choosing_field)


@router.message(UpdateState.choosing_field)
async def choose_field(message: types.Message, state: FSMContext):
    if message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(message.from_user.id))
        return

    field_map = {
        "–∏–º—è": "first_name",
        "—Ñ–∞–º–∏–ª–∏—è": "last_name",
        "–¥–µ–Ω—å": "day_of_week",
        "–≤—Ä–µ–º—è": "lesson_time"
    }
    field = field_map.get(message.text.lower())
    if not field:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ò–º—è / –§–∞–º–∏–ª–∏—è / –î–µ–Ω—å / –í—Ä–µ–º—è")
        return

    await state.update_data(field=field)
    await message.answer(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´{message.text.capitalize()}¬ª:")
    await state.set_state(UpdateState.updating_value)



@router.message(UpdateState.updating_value)
async def update_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field = data["field"]
    value = message.text

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏
    if field == "lesson_time":
        try:
            value = datetime.strptime(value, "%H:%M").time()
        except ValueError:
            await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
            return

    valid_days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    if field == "day_of_week":
        if value.lower() not in valid_days:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫ –ø—Ä–∏–º–µ—Ä—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫, —Å—Ä–µ–¥–∞, —á–µ—Ç–≤–µ—Ä–≥, –ø—è—Ç–Ω–∏—Ü–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
            return

    await update_student_field(message.from_user.id, field, value)
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=update_fields_keyboard)
    await state.set_state(UpdateState.choosing_field)


